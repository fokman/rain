//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.hp.tel.ice.book;

public class Message implements java.lang.Cloneable,
                                java.io.Serializable
{
    public String name;

    public int type;

    public boolean valid;

    public double price;

    public String content;

    public Message()
    {
        this.name = "";
        this.content = "";
    }

    public Message(String name, int type, boolean valid, double price, String content)
    {
        this.name = name;
        this.type = type;
        this.valid = valid;
        this.price = price;
        this.content = content;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Message r = null;
        if(rhs instanceof Message)
        {
            r = (Message)rhs;
        }

        if(r != null)
        {
            if(this.name != r.name)
            {
                if(this.name == null || r.name == null || !this.name.equals(r.name))
                {
                    return false;
                }
            }
            if(this.type != r.type)
            {
                return false;
            }
            if(this.valid != r.valid)
            {
                return false;
            }
            if(this.price != r.price)
            {
                return false;
            }
            if(this.content != r.content)
            {
                if(this.content == null || r.content == null || !this.content.equals(r.content))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::book::Message");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, name);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, type);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, valid);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, price);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, content);
        return h_;
    }

    public Message clone()
    {
        Message c = null;
        try
        {
            c = (Message)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.name);
        ostr.writeInt(this.type);
        ostr.writeBool(this.valid);
        ostr.writeDouble(this.price);
        ostr.writeString(this.content);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.name = istr.readString();
        this.type = istr.readInt();
        this.valid = istr.readBool();
        this.price = istr.readDouble();
        this.content = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Message v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Message ice_read(com.zeroc.Ice.InputStream istr)
    {
        Message v = new Message();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Message> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Message v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Message> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Message.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Message _nullMarshalValue = new Message();

    /** @hidden */
    public static final long serialVersionUID = -281949533L;
}
